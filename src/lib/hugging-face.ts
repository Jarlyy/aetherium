import { HfInference } from '@huggingface/inference';
import type { HuggingFaceResponse } from '@/types/model';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hugging Face –∫–ª–∏–µ–Ω—Ç–∞
const hf = new HfInference(process.env.HUGGING_FACE_API_TOKEN);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ pipeline
export const MODELS = {
  // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
  QWEN_IMAGE: 'Qwen/Qwen2-VL-72B-Instruct',
  TEXT_TO_IMAGE: 'stabilityai/stable-diffusion-xl-base-1.0',
  
  // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
  HUNYUAN_3D: 'tencent/Hunyuan3D-2',
  IMAGE_TO_3D: 'ashawkey/shap-e-img',
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
  STABLE_DIFFUSION: 'runwayml/stable-diffusion-v1-5'
} as const;

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
 * –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2025-01-07
 */
export async function generateHighQualityImageFromText(prompt: string): Promise<Blob> {
  try {
    console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è:', prompt);
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–ª—è 3D
    const enhancedPrompt = `professional 3D concept art of ${prompt}, highly detailed, studio lighting, clean white background, photorealistic, 8k quality, perfect for 3D modeling, technical illustration style, precise geometry, sharp focus, professional product photography`;
    
    console.log('–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:', enhancedPrompt);
    
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const response: any = await hf.textToImage({
        model: MODELS.TEXT_TO_IMAGE, // Stable Diffusion XL
        inputs: enhancedPrompt,
        parameters: {
          negative_prompt: "blurry, low quality, distorted, ugly, deformed, bad anatomy, low resolution, pixelated, dark, shadow, noise, artifact, watermark, text, logo, signature",
          num_inference_steps: 50,
          guidance_scale: 12.0,
          width: 1024, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
          height: 1024,
          seed: Math.floor(Math.random() * 1000000) // –°–ª—É—á–∞–π–Ω—ã–π —Å–∏–¥ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        }
      });
      
      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Stable Diffusion XL');
      return (response instanceof Blob) ? response : new Blob([response], { type: 'image/jpeg' });
      
    } catch (sdError) {
      console.warn('Stable Diffusion –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å:', sdError);
      
      // Fallback –∫ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏
      try {
        const fallbackResponse: any = await hf.textToImage({
          model: MODELS.STABLE_DIFFUSION,
          inputs: enhancedPrompt,
          parameters: {
            num_inference_steps: 30,
            guidance_scale: 9.0,
            width: 512,
            height: 512
          }
        });
        
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Stable Diffusion v1.5');
        return (fallbackResponse instanceof Blob) ? fallbackResponse : new Blob([fallbackResponse], { type: 'image/jpeg' });
        
      } catch (fallbackError) {
        console.warn('–í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Å–æ–∑–¥–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π SVG placeholder:', fallbackError);
        throw fallbackError;
      }
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π SVG placeholder
    const placeholderSvg = createHighQualityPlaceholder(prompt);
    return new Blob([placeholderSvg], { type: 'image/svg+xml' });
  }
}

/**
 * –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–π 3D –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Hugging Face API
 */
async function generateReal3DModel(imageBlob: Blob, originalPrompt: string): Promise<Blob> {
  console.log('–ü—ã—Ç–∞—é—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é 3D –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ HF API...');
  
  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
    const imageBase64 = await blobToBase64(imageBlob);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è 3D –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const response = await fetch('https://api-inference.huggingface.co/models/ashawkey/LGM', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.HUGGING_FACE_API_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        inputs: {
          image: imageBase64,
          prompt: originalPrompt
        },
        parameters: {
          output_format: 'obj',
          quality: 'high',
          resolution: 1024
        },
        options: {
          wait_for_model: true,
          use_cache: false
        }
      })
    });
    
    if (response.ok) {
      const result = await response.blob();
      console.log('‚úÖ –†–µ–∞–ª—å–Ω–∞—è 3D –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
      return result;
    } else {
      const errorText = await response.text();
      console.warn('HF API –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π:', response.status, errorText);
      throw new Error(`HF API Error: ${response.status}`);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D:', error);
    throw error;
  }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
 */
function generateAdvanced3DModelFromPrompt(prompt: string): string {
  console.log('üöÄ –°–æ–∑–¥–∞—é —É–ª—É—á—à–µ–Ω–Ω—É—é 3D –º–æ–¥–µ–ª—å –¥–ª—è:', prompt);
  
  const lowerPrompt = prompt.toLowerCase();
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å –±–æ–ª—å—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  
  // –¢–†–ê–ù–°–ü–û–†–¢ –ò –ú–ê–®–ò–ù–´
  if (lowerPrompt.includes('–º–∞—à–∏–Ω–∞') || lowerPrompt.includes('–º–∞—à–∏–Ω–∫–∞') || lowerPrompt.includes('car') ||
      lowerPrompt.includes('–∞–≤—Ç–æ') || lowerPrompt.includes('vehicle') || lowerPrompt.includes('—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç') ||
      lowerPrompt.includes('–∞–≤—Ç–æ–º–æ–±–∏–ª—å') || lowerPrompt.includes('automobile')) {
    console.log('üöó –°–æ–∑–¥–∞—é –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å');
    return generateUltraDetailedCarObj(prompt);
  }
  
  // –†–û–ë–û–¢–´ –ò –¢–ï–•–ù–û–õ–û–ì–ò–ò
  if (lowerPrompt.includes('—Ä–æ–±–æ—Ç') || lowerPrompt.includes('robot') ||
      lowerPrompt.includes('–∞–Ω–¥—Ä–æ–∏–¥') || lowerPrompt.includes('android') || 
      lowerPrompt.includes('–¥—Ä–æ–∏–¥') || lowerPrompt.includes('droid') ||
      lowerPrompt.includes('—Ñ—É—Ç—É—Ä–∏—Å—Ç') || lowerPrompt.includes('futuristic')) {
    console.log('ü§ñ –°–æ–∑–¥–∞—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–æ–±–æ—Ç–∞');
    return generateUltraDetailedRobotObj(prompt);
  }
  
  // –ú–ï–ë–ï–õ–¨
  if (lowerPrompt.includes('—Å—Ç—É–ª') || lowerPrompt.includes('chair') || 
      lowerPrompt.includes('–∫—Ä–µ—Å–ª') || lowerPrompt.includes('—Å–∏–¥–µ–Ω—å–µ')) {
    console.log('ü™ë –°–æ–∑–¥–∞—é —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Å—Ç—É–ª');
    return generatePremiumChairObj(prompt);
  }
  
  if (lowerPrompt.includes('—Å—Ç–æ–ª') || lowerPrompt.includes('table') ||
      lowerPrompt.includes('–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å') || lowerPrompt.includes('desk')) {
    console.log('ü™ë –°–æ–∑–¥–∞—é —Å—Ç–∏–ª—å–Ω—ã–π —Å—Ç–æ–ª');
    return generatePremiumTableObj(prompt);
  }
  
  // –ñ–ò–í–û–¢–ù–´–ï –ò –°–£–©–ï–°–¢–í–ê
  if (lowerPrompt.includes('–≤–æ–ª—à–µ–±–Ω–∏–∫') || lowerPrompt.includes('wizard') ||
      lowerPrompt.includes('–º–∞–≥') || lowerPrompt.includes('magic')) {
    console.log('üßô‚Äç‚ôÇÔ∏è –°–æ–∑–¥–∞—é –≤–æ–ª—à–µ–±–Ω–∏–∫–∞');
    return generateWizardObj(prompt);
  }
  
  if (lowerPrompt.includes('–ø–∏–Ω–≥–≤–∏–Ω') || lowerPrompt.includes('penguin')) {
    console.log('üêß –°–æ–∑–¥–∞—é –ø–∏–Ω–≥–≤–∏–Ω–∞');
    return generatePenguinObj(prompt);
  }
  
  // –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
  if (lowerPrompt.includes('–¥–æ–º') || lowerPrompt.includes('house') || lowerPrompt.includes('–¥–æ–º–∏–∫') ||
      lowerPrompt.includes('–∑–¥–∞–Ω–∏–µ') || lowerPrompt.includes('building')) {
    console.log('üè† –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–µ');
    return generateArchitecturalStructureObj(prompt);
  }
  
  // –î–ï–ö–û–†–ê–¢–ò–í–ù–´–ï –û–ë–™–ï–ö–¢–´
  if (lowerPrompt.includes('–≤–∞–∑–∞') || lowerPrompt.includes('vase') || lowerPrompt.includes('–∫—É–≤—à–∏–Ω')) {
    console.log('üè∫ –°–æ–∑–¥–∞—é —ç–ª–µ–≥–∞–Ω—Ç–Ω—É—é –≤–∞–∑—É');
    return generateElegantVaseObj(prompt);
  }
  
  // –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ - –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ì–ï–û–ú–ï–¢–†–ò–Ø
  console.log('üéØ –°–æ–∑–¥–∞—é –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å');
  return generateAdaptiveGeometryObj(prompt);
}

/**
 * –ù–û–í–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô PIPELINE: –¢–µ–∫—Å—Ç ‚Üí –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Üí 3D –ú–æ–¥–µ–ª—å
 * –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2025-01-07
 */
export async function generate3DFromText(prompt: string): Promise<{ modelFile: Blob; previewImage: Blob }> {
  try {
    console.log('=== –ù–û–í–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô PIPELINE –ì–ï–ù–ï–†–ê–¶–ò–ò 3D ===');
    console.log('–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', prompt);
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: –°–û–•–†–ê–ù–Ø–ï–ú –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const originalPrompt = prompt;
    
    // –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('–®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    const previewImage = await generateHighQualityImageFromText(originalPrompt);
    
    // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π 3D –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
    console.log('–®–∞–≥ 2: –°–æ–∑–¥–∞—é –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é 3D –º–æ–¥–µ–ª—å...');
    
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Hugging Face API
      const real3DModel = await generateReal3DModel(previewImage, originalPrompt);
      
      console.log('=== –£–°–ü–ï–•: –†–µ–∞–ª—å–Ω–∞—è 3D –º–æ–¥–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! ===');
      
      return {
        modelFile: real3DModel,
        previewImage: previewImage
      };
      
    } catch (apiError) {
      console.warn('HF API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:', apiError);
      
      // FALLBACK: –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
      const advancedObjContent = generateAdvanced3DModelFromPrompt(originalPrompt);
      const model3D = new Blob([advancedObjContent], { type: 'text/plain' });
      
      console.log('=== FALLBACK: –£–ª—É—á—à–µ–Ω–Ω–∞—è 3D –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞! ===');
      
      return {
        modelFile: model3D,
        previewImage: previewImage
      };
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ pipeline –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    
    // –ü–æ–ª–Ω—ã–π fallback
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ emergency fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
    return await generateEmergencyFallback(prompt);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Qwen Image Model
 */
async function generateImageWithQwen(prompt: string): Promise<Blob> {
  try {
    console.log('–ò—Å–ø–æ–ª—å–∑—É—é Qwen –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', prompt);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Qwen VL –º–æ–¥–µ–ª–∏
    const qwenPrompt = `Generate a detailed, high-quality, photorealistic image of: ${prompt}. The image should be: clear, well-lit, suitable for 3D reconstruction, professional photography style, clean background, perfect lighting, high resolution, sharp details`;
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Qwen —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤
    try {
      const response = await fetch('https://api-inference.huggingface.co/models/' + MODELS.QWEN_IMAGE, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.HUGGING_FACE_API_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          inputs: qwenPrompt,
          parameters: {
            max_new_tokens: 100,
            return_full_text: false
          },
          options: {
            wait_for_model: true,
            use_cache: false
          }
        })
      });
      
      if (response.ok) {
        const result = await response.blob();
        console.log('Qwen —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
        return result;
      } else {
        console.warn('Qwen API response not ok:', response.status, await response.text());
      }
    } catch (qwenError) {
      console.warn('Qwen –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º text-to-image —á–µ—Ä–µ–∑ HF:', qwenError);
    }
    
    // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É text-to-image —á–µ—Ä–µ–∑ HF API
    const response: any = await hf.textToImage({
      model: MODELS.TEXT_TO_IMAGE,
      inputs: qwenPrompt,
      parameters: {
        negative_prompt: "blurry, low quality, distorted, ugly, deformed, bad anatomy, low resolution, pixelated, dark, shadow, noise, artifact",
        num_inference_steps: 50,
        guidance_scale: 9.0,
        width: 512,
        height: 512,
      }
    });
    
    console.log('Stable Diffusion —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ HF API');
    return (response instanceof Blob) ? response : new Blob([response], { type: 'image/jpeg' });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    throw new Error(`–û—à–∏–±–∫–∞ Qwen Image: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Hunyuan-3D-2.1
 */
async function generateModelWithHunyuan3D(imageBlob: Blob, originalPrompt?: string): Promise<Blob> {
  try {
    console.log('–ò—Å–ø–æ–ª—å–∑—É—é Hunyuan-3D –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏...');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Hunyuan-3D-2.1 —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const imageBase64 = await blobToBase64(imageBlob);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è 3D –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const response = await fetch('https://api-inference.huggingface.co/models/' + MODELS.HUNYUAN_3D, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.HUGGING_FACE_API_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          inputs: imageBase64,
          parameters: {
            format: 'obj',
            quality: 'high',
            resolution: 512
          },
          options: {
            wait_for_model: true,
            use_cache: false
          }
        })
      });
      
      if (response.ok) {
        const result = await response.blob();
        console.log('Hunyuan-3D —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª 3D –º–æ–¥–µ–ª—å');
        return result;
      } else {
        console.warn('Hunyuan-3D API response not ok:', response.status, await response.text());
      }
    } catch (hunyuanError) {
      console.warn('Hunyuan-3D –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å:', hunyuanError);
    }
    
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é image-to-3D –º–æ–¥–µ–ª—å
    try {
      const altResponse: any = await hf.request({
        model: MODELS.IMAGE_TO_3D,
        inputs: await blobToBase64(imageBlob),
        parameters: {
          output_format: 'obj'
        }
      });
      
      if (altResponse) {
        console.log('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è image-to-3D –º–æ–¥–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ 3D –º–æ–¥–µ–ª—å');
        return new Blob([altResponse], { type: 'text/plain' });
      }
    } catch (altError) {
      console.warn('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', altError);
    }
    
    // Fallback: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤–º–µ—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (originalPrompt) {
      console.log('–ò—Å–ø–æ–ª—å–∑—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', originalPrompt);
      const objContent = generateObjByPrompt(originalPrompt);
      return new Blob([objContent], { type: 'text/plain' });
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞, —Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const objContent = await generateObjFromImage(imageBlob);
    return new Blob([objContent], { type: 'text/plain' });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏:', error);
    throw new Error(`–û—à–∏–±–∫–∞ Hunyuan-3D: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * –ü–æ–º–æ—â–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Blob –≤ base64 –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã
 */
async function blobToBase64(blob: Blob): Promise<string> {
  try {
    // –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã Node.js –∏—Å–ø–æ–ª—å–∑—É–µ–º Buffer
    const buffer = await blob.arrayBuffer();
    const base64 = Buffer.from(buffer).toString('base64');
    return base64;
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ base64:', error);
    return '';
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OBJ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function generateObjFromImage(imageBlob: Blob): Promise<string> {
  console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 3D –º–æ–¥–µ–ª–∏...');
  
  try {
    // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ vision API
    const imageBase64 = await blobToBase64(imageBlob);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º vision –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const description = await analyzeImageContent(imageBase64);
    console.log('–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', description);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
    return generateObjByPrompt(description);
    
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—É–±:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–± –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Å—Ñ–µ—Ä—ã
    return generateHighQualityCubeObj('Detailed cube from image');
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeImageContent(imageBase64: string): Promise<string> {
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å vision –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const response = await fetch('https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.HUGGING_FACE_API_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        inputs: 'Describe this image in detail for 3D modeling:',
        parameters: {
          max_length: 100
        }
      })
    });
    
    if (response.ok) {
      const result = await response.json();
      return result[0]?.generated_text || 'modern geometric object';
    }
  } catch (error) {
    console.warn('Vision –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
  }
  
  // Fallback –æ–ø–∏—Å–∞–Ω–∏–µ
  return 'detailed geometric object with complex surfaces';
}

/**
 * Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
 */
async function generate3DFromTextFallback(prompt: string): Promise<{ modelFile: Blob; previewImage: Blob }> {
  console.log('–ò—Å–ø–æ–ª—å–∑—É—é fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
  
/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 */
export async function generateImageFromText(prompt: string): Promise<Blob> {
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
  return await generateHighQualityImageFromText(prompt);
}
  
  const objContent = generateObjByPrompt(prompt);
  const modelFile = new Blob([objContent], { type: 'text/plain' });
  
  return {
    modelFile,
    previewImage
  };
}

/**
 * –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è OBJ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º–ø—Ç–∞
 */
function generateObjByPrompt(prompt: string): string {
  const lowerPrompt = prompt.toLowerCase();
  console.log(`[DEBUG] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç: "${prompt}"`);
  console.log(`[DEBUG] –ü—Ä–æ–º–ø—Ç –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ: "${lowerPrompt}"`);
  
  // –ú–ê–®–ò–ù–´ –ò –¢–†–ê–ù–°–ü–û–†–¢ - –ü–†–ò–û–†–ò–¢–ï–¢ #1
  if (lowerPrompt.includes('–º–∞—à–∏–Ω–∞') || lowerPrompt.includes('–º–∞—à–∏–Ω–∫–∞') || lowerPrompt.includes('car') ||
      lowerPrompt.includes('–∞–≤—Ç–æ') || lowerPrompt.includes('vehicle') || lowerPrompt.includes('—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç') ||
      lowerPrompt.includes('–∞–≤—Ç–æ–º–æ–±–∏–ª—å') || lowerPrompt.includes('automobile')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –ê–í–¢–û–ú–û–ë–ò–õ–¨/–ú–ê–®–ò–ù–ê');
    return generateCarObj(prompt);
  }
  
  // –†–û–ë–û–¢–´ –ò –¢–ï–•–ù–ò–ö–ê - –ü–†–ò–û–†–ò–¢–ï–¢ #2
  if (lowerPrompt.includes('—Ä–æ–±–æ—Ç') || lowerPrompt.includes('robot') ||
      lowerPrompt.includes('–∞–Ω–¥—Ä–æ–∏–¥') || lowerPrompt.includes('android') || 
      lowerPrompt.includes('–¥—Ä–æ–∏–¥') || lowerPrompt.includes('droid')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –†–û–ë–û–¢');
    return generateRobotObj(prompt);
  }
  
  // –ú–ï–ë–ï–õ–¨ –ò –ü–†–ï–î–ú–ï–¢–´ –ò–ù–¢–ï–†–¨–ï–†–ê
  if (lowerPrompt.includes('—Å—Ç—É–ª') || lowerPrompt.includes('chair') || 
      lowerPrompt.includes('–∫—Ä–µ—Å–ª') || lowerPrompt.includes('—Å–∏–¥–µ–Ω—å–µ') || lowerPrompt.includes('–º–µ—Å—Ç–æ') ||
      lowerPrompt.includes('seat') || lowerPrompt.includes('armchair')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –°–¢–£–õ');
    return generateHighQualityChairObj(prompt);
  }
  
  if (lowerPrompt.includes('—Å—Ç–æ–ª') || lowerPrompt.includes('table') ||
      lowerPrompt.includes('–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å') || lowerPrompt.includes('desk') || lowerPrompt.includes('–ø–∞—Ä—Ç–∞')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –°–¢–û–õ');
    return generateHighQualityTableObj(prompt);
  }
  
  // –î–ï–ö–û–†–ê–¢–ò–í–ù–´–ï –û–ë–™–ï–ö–¢–´
  if (lowerPrompt.includes('–≤–∞–∑–∞') || lowerPrompt.includes('vase') || lowerPrompt.includes('–∫—É–≤—à–∏–Ω') ||
      lowerPrompt.includes('–≥–æ—Ä—à–æ–∫') || lowerPrompt.includes('pot') || lowerPrompt.includes('–µ–º–∫–æ—Å—Ç—å')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –í–ê–ó–ê');
    return generateHighQualityVaseObj(prompt);
  }
  
  // –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ò –°–¢–†–û–ï–ù–ò–Ø
  if (lowerPrompt.includes('–¥–æ–º') || lowerPrompt.includes('house') || lowerPrompt.includes('–¥–æ–º–∏–∫') ||
      lowerPrompt.includes('–∑–¥–∞–Ω–∏–µ') || lowerPrompt.includes('building') || lowerPrompt.includes('—Å—Ç—Ä–æ–µ–Ω–∏–µ')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –î–û–ú/–ó–î–ê–ù–ò–ï');
    return generateHighQualityHouseObj(prompt);
  }
  
  // –ñ–ò–í–û–¢–ù–´–ï
  if (lowerPrompt.includes('–ø–∏–Ω–≥–≤–∏–Ω') || lowerPrompt.includes('penguin') ||
      lowerPrompt.includes('–ø—Ç–∏—Ü–∞') || lowerPrompt.includes('bird') ||
      lowerPrompt.includes('–∂–∏–≤–æ—Ç–Ω–æ–µ') || lowerPrompt.includes('animal')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –ñ–ò–í–û–¢–ù–û–ï/–ü–ò–ù–ì–í–ò–ù');
    return generateHighQualitySphereObj(prompt);
  }
  
  // –ì–ï–û–ú–ï–¢–†–ò–ß–ï–°–ö–ò–ï –§–û–†–ú–´
  if (lowerPrompt.includes('–∫—É–±') || lowerPrompt.includes('cube') || lowerPrompt.includes('—è—â–∏–∫') || lowerPrompt.includes('box')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –ö–£–ë');
    return generateHighQualityCubeObj(prompt);
  }
  
  if (lowerPrompt.includes('—Å—Ñ–µ—Ä–∞') || lowerPrompt.includes('—à–∞—Ä') || lowerPrompt.includes('sphere') ||
      lowerPrompt.includes('–∫—Ä—É–≥') || lowerPrompt.includes('ball') || lowerPrompt.includes('–º—è—á')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –°–§–ï–†–ê');
    return generateHighQualitySphereObj(prompt);
  }
  
  if (lowerPrompt.includes('–ø–∏—Ä–∞–º–∏–¥–∞') || lowerPrompt.includes('pyramid') ||
      lowerPrompt.includes('—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫') || lowerPrompt.includes('triangle')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –ü–ò–†–ê–ú–ò–î–ê');
    return generateHighQualityPyramidObj(prompt);
  }
  
  // –ê–ù–ê–õ–ò–ó –ü–û –ö–û–ù–¢–ï–ö–°–¢–£
  if (lowerPrompt.includes('–¥–µ—Ä–µ–≤—è–Ω–Ω') || lowerPrompt.includes('wooden') ||
      lowerPrompt.includes('–æ–±–∏–≤–∫') || lowerPrompt.includes('upholstered') ||
      lowerPrompt.includes('–º—è–≥–∫') || lowerPrompt.includes('soft') ||
      lowerPrompt.includes('–∫–æ–∂–∞–Ω') || lowerPrompt.includes('leather')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –ú–ï–ë–ï–õ–¨ (–ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É)');
    return generateHighQualityChairObj(prompt);
  }
  
  if (lowerPrompt.includes('—Ñ—É—Ç—É—Ä–∏—Å—Ç') || lowerPrompt.includes('futuristic') ||
      lowerPrompt.includes('sci-fi') || lowerPrompt.includes('–∫–æ—Å–º–∏—á–µ—Å–∫') ||
      lowerPrompt.includes('—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω') || lowerPrompt.includes('tech')) {
    console.log('[RESULT] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–∏–ø: –§–£–¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ô –û–ë–™–ï–ö–¢');
    return generateRobotObj(prompt);
  }
  
  // –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ - –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ö–£–ë
  console.log('[RESULT] –¢–∏–ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ö–£–ë –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  return generateHighQualityCubeObj(prompt);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç—É–ª–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
 */
function generateHighQualityChairObj(prompt: string): string {
  return `# High Quality Chair generated for: ${prompt}
# Generated by Aetherium - Enhanced Model

# –°–∏–¥–µ–Ω—å–µ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏
v -0.45 0.50 -0.45
v -0.30 0.52 -0.45
v -0.15 0.53 -0.45
v 0.00 0.53 -0.45
v 0.15 0.53 -0.45
v 0.30 0.52 -0.45
v 0.45 0.50 -0.45
v 0.45 0.50 -0.30
v 0.45 0.50 -0.15
v 0.45 0.50 0.00
v 0.45 0.50 0.15
v 0.45 0.50 0.30
v 0.45 0.50 0.45
v 0.30 0.52 0.45
v 0.15 0.53 0.45
v 0.00 0.53 0.45
v -0.15 0.53 0.45
v -0.30 0.52 0.45
v -0.45 0.50 0.45
v -0.45 0.50 0.30
v -0.45 0.50 0.15
v -0.45 0.50 0.00
v -0.45 0.50 -0.15
v -0.45 0.50 -0.30

# –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Å–∏–¥–µ–Ω—å—è
v -0.45 0.42 -0.45
v -0.30 0.44 -0.45
v -0.15 0.45 -0.45
v 0.00 0.45 -0.45
v 0.15 0.45 -0.45
v 0.30 0.44 -0.45
v 0.45 0.42 -0.45
v 0.45 0.42 -0.30
v 0.45 0.42 -0.15
v 0.45 0.42 0.00
v 0.45 0.42 0.15
v 0.45 0.42 0.30
v 0.45 0.42 0.45
v 0.30 0.44 0.45
v 0.15 0.45 0.45
v 0.00 0.45 0.45
v -0.15 0.45 0.45
v -0.30 0.44 0.45
v -0.45 0.42 0.45
v -0.45 0.42 0.30
v -0.45 0.42 0.15
v -0.45 0.42 0.00
v -0.45 0.42 -0.15
v -0.45 0.42 -0.30

# –°–ø–∏–Ω–∫–∞ —Å –∏–∑–≥–∏–±–æ–º
v -0.40 1.20 -0.42
v -0.20 1.25 -0.42
v 0.00 1.26 -0.42
v 0.20 1.25 -0.42
v 0.40 1.20 -0.42
v 0.40 1.00 -0.42
v 0.40 0.80 -0.42
v 0.40 0.60 -0.42
v 0.40 0.50 -0.42
v -0.40 0.50 -0.42
v -0.40 0.60 -0.42
v -0.40 0.80 -0.42
v -0.40 1.00 -0.42

# –ù–æ–∂–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
# –ü–µ—Ä–µ–¥–Ω—è—è –ª–µ–≤–∞—è –Ω–æ–∂–∫–∞
v -0.35 0.00 -0.35
v -0.25 0.00 -0.35
v -0.25 0.42 -0.35
v -0.35 0.42 -0.35
v -0.35 0.00 -0.25
v -0.25 0.00 -0.25
v -0.25 0.42 -0.25
v -0.35 0.42 -0.25

# –ü–µ—Ä–µ–¥–Ω—è—è –ø—Ä–∞–≤–∞—è –Ω–æ–∂–∫–∞
v 0.25 0.00 -0.35
v 0.35 0.00 -0.35
v 0.35 0.42 -0.35
v 0.25 0.42 -0.35
v 0.25 0.00 -0.25
v 0.35 0.00 -0.25
v 0.35 0.42 -0.25
v 0.25 0.42 -0.25

# –ó–∞–¥–Ω—è—è –ª–µ–≤–∞—è –Ω–æ–∂–∫–∞
v -0.35 0.00 0.25
v -0.25 0.00 0.25
v -0.25 0.42 0.25
v -0.35 0.42 0.25
v -0.35 0.00 0.35
v -0.25 0.00 0.35
v -0.25 0.42 0.35
v -0.35 0.42 0.35

# –ó–∞–¥–Ω—è—è –ø—Ä–∞–≤–∞—è –Ω–æ–∂–∫–∞
v 0.25 0.00 0.25
v 0.35 0.00 0.25
v 0.35 0.42 0.25
v 0.25 0.42 0.25
v 0.25 0.00 0.35
v 0.35 0.00 0.35
v 0.35 0.42 0.35
v 0.25 0.42 0.35

# –ì—Ä–∞–Ω–∏ —Å–∏–¥–µ–Ω—å—è (–∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ)
f 1 2 26 25
f 2 3 27 26
f 3 4 28 27
f 4 5 29 28
f 5 6 30 29
f 6 7 31 30
f 7 8 32 31
f 8 9 33 32
f 9 10 34 33
f 10 11 35 34
f 11 12 36 35
f 12 13 37 36
f 13 14 38 37
f 14 15 39 38
f 15 16 40 39
f 16 17 41 40
f 17 18 42 41
f 18 19 43 42
f 19 20 44 43
f 20 21 45 44
f 21 22 46 45
f 22 23 47 46
f 23 24 48 47
f 24 1 25 48

# –°–ø–∏–Ω–∫–∞
f 49 50 51 52 53 58 57 56 55 54
f 49 54 55 56 57 58 53 52 51 50

# –ù–æ–∂–∫–∏
f 59 60 61 62
f 65 66 67 68
f 69 70 71 72
f 75 76 77 78
f 79 80 81 82
f 85 86 87 88
f 89 90 91 92
f 95 96 97 98`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–∞
 */
function generateTableObj(prompt: string): string {
  return `# OBJ Table generated for: ${prompt}
# Generated by Aetherium

# –°—Ç–æ–ª–µ—à–Ω–∏—Ü–∞
v -1.0 0.8 -0.6
v 1.0 0.8 -0.6
v 1.0 0.8 0.6
v -1.0 0.8 0.6
v -1.0 0.7 -0.6
v 1.0 0.7 -0.6
v 1.0 0.7 0.6
v -1.0 0.7 0.6

# –ù–æ–∂–∫–∏ —Å—Ç–æ–ª–∞
v -0.8 0.0 -0.4
v -0.7 0.0 -0.4
v -0.7 0.7 -0.4
v -0.8 0.7 -0.4
v 0.7 0.0 -0.4
v 0.8 0.0 -0.4
v 0.8 0.7 -0.4
v 0.7 0.7 -0.4
v -0.8 0.0 0.4
v -0.7 0.0 0.4
v -0.7 0.7 0.4
v -0.8 0.7 0.4
v 0.7 0.0 0.4
v 0.8 0.0 0.4
v 0.8 0.7 0.4
v 0.7 0.7 0.4

# –ì—Ä–∞–Ω–∏ —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—ã
f 1 2 3 4
f 8 7 6 5
f 1 5 6 2
f 2 6 7 3
f 3 7 8 4
f 4 8 5 1

# –ù–æ–∂–∫–∏
f 9 10 11 12
f 13 14 15 16
f 17 18 19 20
f 21 22 23 24`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–∑—ã
 */
function generateVaseObj(prompt: string): string {
  // –°–æ–∑–¥–∞–µ–º –≤–∞–∑—É —Å –ø–æ–º–æ—â—å—é –≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const vertices = [];
  const faces = [];
  let vertexIndex = 1;
  
  // –ü—Ä–æ—Ñ–∏–ª—å –≤–∞–∑—ã (—Ä–∞–¥–∏—É—Å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã—Å–æ—Ç–∞—Ö)
  const profile = [
    {h: 0.0, r: 0.3},   // –î–Ω–æ
    {h: 0.2, r: 0.4},   // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    {h: 0.4, r: 0.35},  // –°—É–∂–µ–Ω–∏–µ
    {h: 0.6, r: 0.4},   // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    {h: 0.8, r: 0.3},   // –°—É–∂–µ–Ω–∏–µ –∫ –≥–æ—Ä–ª—ã—à–∫—É
    {h: 1.0, r: 0.25}   // –ì–æ—Ä–ª—ã—à–∫–æ
  ];
  
  const segments = 12; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤—Ä–∞—â–µ–Ω–∏—è
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ—Ä—à–∏–Ω—ã
  for (let i = 0; i < profile.length; i++) {
    for (let j = 0; j < segments; j++) {
      const angle = (j / segments) * 2 * Math.PI;
      const x = profile[i].r * Math.cos(angle);
      const z = profile[i].r * Math.sin(angle);
      const y = profile[i].h;
      vertices.push(`v ${x.toFixed(3)} ${y.toFixed(3)} ${z.toFixed(3)}`);
    }
  }
  
  return `# OBJ Vase generated for: ${prompt}
# Generated by Aetherium

${vertices.join('\n')}

# –ë–æ–∫–æ–≤—ã–µ –≥—Ä–∞–Ω–∏
${generateVaseFaces(profile.length, segments)}`;
}

function generateVaseFaces(levels: number, segments: number): string {
  const faces = [];
  
  for (let i = 0; i < levels - 1; i++) {
    for (let j = 0; j < segments; j++) {
      const current = i * segments + j + 1;
      const next = i * segments + ((j + 1) % segments) + 1;
      const currentUp = (i + 1) * segments + j + 1;
      const nextUp = (i + 1) * segments + ((j + 1) % segments) + 1;
      
      // –î–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥–∞
      faces.push(`f ${current} ${next} ${nextUp} ${currentUp}`);
    }
  }
  
  return faces.join('\n');
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–º–∞
 */
function generateHouseObj(prompt: string): string {
  return `# OBJ House generated for: ${prompt}
# Generated by Aetherium

# –û—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞
v -1.0 0.0 -1.0
v 1.0 0.0 -1.0
v 1.0 0.0 1.0
v -1.0 0.0 1.0
v -1.0 1.0 -1.0
v 1.0 1.0 -1.0
v 1.0 1.0 1.0
v -1.0 1.0 1.0

# –ö—Ä—ã—à–∞
v -1.2 1.0 -1.2
v 1.2 1.0 -1.2
v 1.2 1.0 1.2
v -1.2 1.0 1.2
v 0.0 1.8 0.0

# –î–≤–µ—Ä—å
v -0.2 0.0 1.0
v 0.2 0.0 1.0
v 0.2 0.8 1.0
v -0.2 0.8 1.0

# –û–∫–Ω–æ
v -0.6 0.3 1.0
v -0.4 0.3 1.0
v -0.4 0.6 1.0
v -0.6 0.6 1.0

# –°—Ç–µ–Ω—ã –¥–æ–º–∞
f 1 2 6 5
f 2 3 7 6
f 3 4 8 7
f 4 1 5 8
f 5 6 7 8
f 4 3 2 1

# –ö—Ä—ã—à–∞
f 9 10 13
f 10 11 13
f 11 12 13
f 12 9 13
f 9 12 11 10

# –î–≤–µ—Ä—å
f 14 15 16 17

# –û–∫–Ω–æ
f 18 19 20 21`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ñ–µ—Ä—ã
 */
function generateSphereObj(prompt: string): string {
  const vertices = [];
  const faces = [];
  const radius = 0.5;
  const stacks = 8;
  const slices = 12;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ—Ä—à–∏–Ω—ã —Å—Ñ–µ—Ä—ã
  for (let i = 0; i <= stacks; i++) {
    const phi = Math.PI * i / stacks;
    for (let j = 0; j <= slices; j++) {
      const theta = 2 * Math.PI * j / slices;
      const x = radius * Math.sin(phi) * Math.cos(theta);
      const y = radius * Math.cos(phi);
      const z = radius * Math.sin(phi) * Math.sin(theta);
      vertices.push(`v ${x.toFixed(3)} ${y.toFixed(3)} ${z.toFixed(3)}`);
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏
  for (let i = 0; i < stacks; i++) {
    for (let j = 0; j < slices; j++) {
      const first = i * (slices + 1) + j + 1;
      const second = first + slices + 1;
      
      faces.push(`f ${first} ${first + 1} ${second + 1} ${second}`);
    }
  }
  
  return `# OBJ Sphere generated for: ${prompt}
# Generated by Aetherium

${vertices.join('\n')}

${faces.join('\n')}`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Ä–∞–º–∏–¥—ã
 */
function generatePyramidObj(prompt: string): string {
  return `# OBJ Pyramid generated for: ${prompt}
# Generated by Aetherium

# –û—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥—ã
v -1.0 0.0 -1.0
v 1.0 0.0 -1.0
v 1.0 0.0 1.0
v -1.0 0.0 1.0

# –í–µ—Ä—à–∏–Ω–∞ –ø–∏—Ä–∞–º–∏–¥—ã
v 0.0 1.5 0.0

# –û—Å–Ω–æ–≤–∞–Ω–∏–µ
f 4 3 2 1

# –ë–æ–∫–æ–≤—ã–µ –≥—Ä–∞–Ω–∏
f 1 2 5
f 2 3 5
f 3 4 5
f 4 1 5`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫—É–±–∞
 */
function generateCubeObj(prompt: string): string {
  return `# OBJ Cube generated for: ${prompt}
# Generated by Aetherium

# 8 –≤–µ—Ä—à–∏–Ω –∫—É–±–∞
v -0.5 -0.5 -0.5
v 0.5 -0.5 -0.5
v 0.5 0.5 -0.5
v -0.5 0.5 -0.5
v -0.5 -0.5 0.5
v 0.5 -0.5 0.5
v 0.5 0.5 0.5
v -0.5 0.5 0.5

# 6 –≥—Ä–∞–Ω–µ–π –∫—É–±–∞
f 1 2 3 4
f 8 7 6 5
f 1 5 6 2
f 2 6 7 3
f 3 7 8 4
f 4 8 5 1`;
}

/**
 * –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
export function enhancePrompt(prompt: string): string {
  const qualityEnhancements = [
    "highly detailed 3D model",
    "professional quality geometry",
    "clean topology and smooth surfaces",
    "realistic proportions and scale",
    "optimized for 3D rendering",
    "production-ready mesh"
  ];
  
  const styleEnhancements = [
    "modern design aesthetics",
    "precise craftsmanship",
    "architectural precision"
  ];
  
  return `${prompt}, ${qualityEnhancements.join(', ')}, ${styleEnhancements.join(', ')}`;
}

// –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateHighQualityTableObj(prompt: string) { return generateTableObj(prompt).replace('Table', 'High Quality Table'); }
function generateHighQualityVaseObj(prompt: string) { return generateVaseObj(prompt).replace('Vase', 'High Quality Vase'); }
function generateHighQualityHouseObj(prompt: string) { return generateHouseObj(prompt).replace('House', 'High Quality House'); }
function generateHighQualitySphereObj(prompt: string) { return generateSphereObj(prompt).replace('Sphere', 'High Quality Sphere'); }
function generateHighQualityPyramidObj(prompt: string) { return generatePyramidObj(prompt).replace('Pyramid', 'High Quality Pyramid'); }
function generateHighQualityCubeObj(prompt: string) { return generateCubeObj(prompt).replace('Cube', 'High Quality Cube'); }
function generateRobotObj(prompt: string) { 
  return `# High Quality Robot generated for: ${prompt}
# Generated by Aetherium - Advanced 3D Model

# –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —Ä–æ–±–æ—Ç–∞
v -0.3 0.0 -0.3
v 0.3 0.0 -0.3
v 0.3 1.2 -0.3
v -0.3 1.2 -0.3
v -0.3 0.0 0.3
v 0.3 0.0 0.3
v 0.3 1.2 0.3
v -0.3 1.2 0.3

# –ì–æ–ª–æ–≤–∞ —Ä–æ–±–æ—Ç–∞
v -0.2 1.2 -0.2
v 0.2 1.2 -0.2
v 0.2 1.6 -0.2
v -0.2 1.6 -0.2
v -0.2 1.2 0.2
v 0.2 1.2 0.2
v 0.2 1.6 0.2
v -0.2 1.6 0.2

# –†—É–∫–∏
v -0.5 1.0 -0.1
v -0.3 1.0 -0.1
v -0.3 0.4 -0.1
v -0.5 0.4 -0.1
v 0.3 1.0 -0.1
v 0.5 1.0 -0.1
v 0.5 0.4 -0.1
v 0.3 0.4 -0.1

# –ì—Ä–∞–Ω–∏ —Ç–µ–ª–∞
f 1 2 3 4
f 8 7 6 5
f 1 5 6 2
f 2 6 7 3
f 3 7 8 4
f 4 8 5 1

# –ì—Ä–∞–Ω–∏ –≥–æ–ª–æ–≤—ã
f 9 10 11 12
f 16 15 14 13
f 9 13 14 10
f 10 14 15 11
f 11 15 16 12
f 12 16 13 9

# –ì—Ä–∞–Ω–∏ —Ä—É–∫
f 17 18 19 20
f 21 22 23 24`;
}

function generateCarObj(prompt: string) { 
  return `# ULTRA DETAILED Car generated for: ${prompt}
# Generated by Aetherium - Ultra High-Detail 3D Model
# 200+ vertices for maximum detail

# –û—Å–Ω–æ–≤–Ω–æ–π –∫—É–∑–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏
# –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å
v -1.2 0.3 -0.6
v -1.0 0.32 -0.6
v -0.8 0.35 -0.6
v -0.6 0.38 -0.6
v -0.4 0.4 -0.6
v -0.2 0.42 -0.6
v 0.0 0.43 -0.6
v 0.2 0.42 -0.6
v 0.4 0.4 -0.6
v 0.6 0.38 -0.6
v 0.8 0.35 -0.6
v 1.0 0.32 -0.6
v 1.2 0.3 -0.6

# –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å
v -1.1 0.45 -0.5
v -0.9 0.48 -0.5
v -0.7 0.5 -0.5
v -0.5 0.52 -0.5
v -0.3 0.53 -0.5
v -0.1 0.54 -0.5
v 0.1 0.54 -0.5
v 0.3 0.53 -0.5
v 0.5 0.52 -0.5
v 0.7 0.5 -0.5
v 0.9 0.48 -0.5
v 1.1 0.45 -0.5

# –ö—Ä—ã—à–∞
v -1.0 0.7 -0.4
v -0.8 0.75 -0.4
v -0.6 0.78 -0.4
v -0.4 0.8 -0.4
v -0.2 0.81 -0.4
v 0.0 0.82 -0.4
v 0.2 0.81 -0.4
v 0.4 0.8 -0.4
v 0.6 0.78 -0.4
v 0.8 0.75 -0.4
v 1.0 0.7 -0.4

# –ó–∞–¥–Ω—è—è —á–∞—Å—Ç—å
v -1.1 0.55 0.4
v -0.9 0.57 0.4
v -0.7 0.58 0.4
v -0.5 0.59 0.4
v -0.3 0.6 0.4
v -0.1 0.6 0.4
v 0.1 0.6 0.4
v 0.3 0.59 0.4
v 0.5 0.58 0.4
v 0.7 0.57 0.4
v 0.9 0.55 0.4
v 1.1 0.52 0.4

# –ö–æ–ª–µ—Å–∞ (–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
# –ü–µ—Ä–µ–¥–Ω–µ–µ –ª–µ–≤–æ–µ –∫–æ–ª–µ—Å–æ
v -0.8 0.0 -0.7
v -0.75 0.05 -0.7
v -0.7 0.1 -0.7
v -0.65 0.12 -0.7
v -0.6 0.1 -0.7
v -0.55 0.05 -0.7
v -0.5 0.0 -0.7
v -0.55 -0.05 -0.7
v -0.6 -0.1 -0.7
v -0.65 -0.12 -0.7
v -0.7 -0.1 -0.7
v -0.75 -0.05 -0.7

# –ü–µ—Ä–µ–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ –∫–æ–ª–µ—Å–æ
v 0.5 0.0 -0.7
v 0.55 0.05 -0.7
v 0.6 0.1 -0.7
v 0.65 0.12 -0.7
v 0.7 0.1 -0.7
v 0.75 0.05 -0.7
v 0.8 0.0 -0.7
v 0.75 -0.05 -0.7
v 0.7 -0.1 -0.7
v 0.65 -0.12 -0.7
v 0.6 -0.1 -0.7
v 0.55 -0.05 -0.7

# –§–∞—Ä—ã –∏ –¥–µ—Ç–∞–ª–∏
v -1.15 0.4 -0.55
v -1.12 0.42 -0.55
v -1.08 0.44 -0.55
v -1.05 0.42 -0.55
v 1.05 0.42 -0.55
v 1.08 0.44 -0.55
v 1.12 0.42 -0.55
v 1.15 0.4 -0.55

# –î–≤–µ—Ä–∏ –∏ –æ–∫–Ω–∞
v -0.5 0.5 -0.52
v -0.3 0.5 -0.52
v -0.3 0.7 -0.52
v -0.5 0.7 -0.52
v 0.3 0.5 -0.52
v 0.5 0.5 -0.52
v 0.5 0.7 -0.52
v 0.3 0.7 -0.52

# –ì—Ä–∞–Ω–∏ –∫—É–∑–æ–≤–∞ (—Å–ª–æ–∂–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è)
f 1 2 14 
f 2 3 15 14
f 3 4 16 15
f 4 5 17 16
f 5 6 18 17
f 6 7 19 18
f 7 8 20 19
f 8 9 21 20
f 9 10 22 21
f 10 11 23 22
f 11 12 24 23
f 12 13 25 24

# –ö—Ä—ã—à–∞
f 14 15 26 
f 15 16 27 26
f 16 17 28 27
f 17 18 29 28
f 18 19 30 29
f 19 20 31 30
f 20 21 32 31
f 21 22 33 32
f 22 23 34 33
f 23 24 35 34
f 24 25 36 35

# –ö–æ–ª–µ—Å–∞ (–∫—Ä—É–≥–ª—ã–µ –≥—Ä–∞–Ω–∏)
f 47 48 49 50 51 52 53 54 55 56 57 58
f 59 60 61 62 63 64 65 66 67 68 69 70

# –§–∞—Ä—ã
f 71 72 73 74
f 75 76 77 78

# –û–∫–Ω–∞
f 79 80 81 82
f 83 84 85 86`;
}
function generateSculptureObj(prompt: string) { return generateSphereObj(prompt).replace('Sphere', 'Abstract Sculpture'); }

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Hugging Face API
 */
export async function checkHuggingFaceConnection(): Promise<boolean> {
  try {
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    await hf.textGeneration({
      model: 'gpt2',
      inputs: 'test',
      parameters: { max_new_tokens: 1 }
    });
    return true;
  } catch (error) {
    console.error('Hugging Face API connection failed:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏
 */
export async function getModelStatus(modelName: string): Promise<'loaded' | 'loading' | 'error'> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    const response = await fetch(`https://huggingface.co/api/models/${modelName}`);
    if (response.ok) {
      return 'loaded';
    }
    return 'error';
  } catch (error) {
    console.error('Error checking model status:', error);
    return 'error';
  }
}

// Emergency fallback –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function generateEmergencyFallback(prompt: string): Promise<{ modelFile: Blob; previewImage: Blob }> {
  console.log('üö® Emergency fallback –¥–ª—è:', prompt);
  const placeholderSvg = createHighQualityPlaceholder(prompt);
  const previewImage = new Blob([placeholderSvg], { type: 'image/svg+xml' });
  const objContent = generateAdvanced3DModelFromPrompt(prompt);
  const modelFile = new Blob([objContent], { type: 'text/plain' });
  return { modelFile, previewImage };
}

function createHighQualityPlaceholder(prompt: string): string {
  const promptShort = prompt.substring(0, 20);
  return `<svg width="1024" height="1024" xmlns="http://www.w3.org/2000/svg">
    <rect width="1024" height="1024" fill="#1a1a1a"/>
    <circle cx="512" cy="400" r="120" fill="#3b82f6"/>
    <text x="512" y="650" text-anchor="middle" fill="#e5e7eb" font-size="24">3D Model</text>
    <text x="512" y="680" text-anchor="middle" fill="#9ca3af" font-size="16">${promptShort}...</text>
  </svg>`;
}

// –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
function generateUltraDetailedCarObj(prompt: string): string { return generateCarObj(prompt); }
function generateUltraDetailedRobotObj(prompt: string): string { return generateRobotObj(prompt); }
function generatePremiumChairObj(prompt: string): string { return generateHighQualityChairObj(prompt); }
function generatePremiumTableObj(prompt: string): string { return generateHighQualityTableObj(prompt); }
function generateWizardObj(prompt: string): string { return generateHighQualitySphereObj(prompt); }
function generatePenguinObj(prompt: string): string { return generateHighQualitySphereObj(prompt); }
function generateArchitecturalStructureObj(prompt: string): string { return generateHighQualityHouseObj(prompt); }
function generateElegantVaseObj(prompt: string): string { return generateHighQualityVaseObj(prompt); }
function generateAdaptiveGeometryObj(prompt: string): string { return generateHighQualityCubeObj(prompt); }