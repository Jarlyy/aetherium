import { HfInference } from '@huggingface/inference';
import type { HuggingFaceResponse } from '@/types/model';

// Инициализация Hugging Face клиента
const hf = new HfInference(process.env.HUGGING_FACE_API_TOKEN);

// Константы моделей
export const MODELS = {
  HUNYUAN_3D: 'tencent/Hunyuan3D-2.1',
  QWEN_IMAGE: 'Qwen/Qwen2-VL-7B-Instruct',
  // Альтернативные модели для тестирования
  TEXT_TO_IMAGE: 'stabilityai/stable-diffusion-xl-base-1.0',
  IMAGE_TO_3D: 'ashawkey/shap-e-img'
} as const;

/**
 * Генерация изображения из текста с помощью Qwen
 */
export async function generateImageFromText(prompt: string): Promise<Blob> {
  try {
    console.log('Generating image with prompt:', prompt);
    
    // Используем text-to-image модель для генерации изображения
    const response = await hf.textToImage({
      model: MODELS.TEXT_TO_IMAGE,
      inputs: prompt,
      parameters: {
        negative_prompt: "blurry, low quality, distorted",
        num_inference_steps: 30,
        guidance_scale: 7.5,
      }
    });

    return response;
  } catch (error) {
    console.error('Error generating image:', error);
    throw new Error(`Ошибка генерации изображения: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Генерация 3D модели из текста (симуляция для MVP)
 * В реальной реализации нужно использовать Hunyuan3D API
 */
export async function generate3DFromText(prompt: string): Promise<{ modelFile: Blob; previewImage: Blob }> {
  try {
    console.log('Generating 3D model with prompt:', prompt);
    
    // Пока Hunyuan3D API сложно интегрировать, создаем mock-реализацию
    // Сначала генерируем изображение концепта
    const previewImage = await generateImageFromText(`3D model concept: ${prompt}, isometric view, clean background`);
    
    // Создаем простой mock .obj файл
    const objContent = `# OBJ file generated for: ${prompt}
# Generated by Aetherium MVP
v 0.0 0.0 0.0
v 1.0 0.0 0.0
v 1.0 1.0 0.0
v 0.0 1.0 0.0
f 1 2 3 4`;
    
    const modelFile = new Blob([objContent], { type: 'text/plain' });
    
    return {
      modelFile,
      previewImage
    };
  } catch (error) {
    console.error('Error generating 3D model:', error);
    throw new Error(`Ошибка генерации 3D модели: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Улучшение промпта для лучших результатов
 */
export function enhancePrompt(prompt: string): string {
  const enhancements = [
    "high quality 3D model",
    "detailed geometry",
    "clean topology",
    "professional rendering"
  ];
  
  return `${prompt}, ${enhancements.join(', ')}`;
}

/**
 * Проверка доступности Hugging Face API
 */
export async function checkHuggingFaceConnection(): Promise<boolean> {
  try {
    // Простой тест API с минимальным запросом
    await hf.textGeneration({
      model: 'gpt2',
      inputs: 'test',
      parameters: { max_new_tokens: 1 }
    });
    return true;
  } catch (error) {
    console.error('Hugging Face API connection failed:', error);
    return false;
  }
}

/**
 * Получение статуса модели
 */
export async function getModelStatus(modelName: string): Promise<'loaded' | 'loading' | 'error'> {
  try {
    // Проверяем доступность модели
    const response = await fetch(`https://huggingface.co/api/models/${modelName}`);
    if (response.ok) {
      return 'loaded';
    }
    return 'error';
  } catch (error) {
    console.error('Error checking model status:', error);
    return 'error';
  }
}